@using UCosmic.Web.Mvc.Models
@model EmployeesBibNavModel
@{
    var tenancy = Request.Tenancy();
    var styleDomain = tenancy != null ? tenancy.StyleDomain : "default";
    var hasStyleDomain = !string.IsNullOrWhiteSpace(styleDomain) && !"default".Equals(styleDomain, StringComparison.OrdinalIgnoreCase);
}

<ul class="group">
    @{
        var activitiesHref = Url.Action(hasStyleDomain ? MVC.Employees.TenantIndex(styleDomain) : MVC.Employees.Index());
        var lastActivitiesLens = Session.LastActivityLens();
        if(Model.Activities && lastActivitiesLens.Contains("table")){
            lastActivitiesLens = "table";
        }else if(Model.Activities && lastActivitiesLens.Contains("map")){
            lastActivitiesLens = "map";
        }
        else if (Model.Activities)
        {
            lastActivitiesLens = "snapshot";
        }
    }
    @*<li class="@(Model.Activities ? "current" : null)">
            @{
                var activitiesHref = Url.Action(hasStyleDomain ? MVC.Employees.TenantIndex(styleDomain) : MVC.Employees.Index());
                var lastActivitiesLens = Session.LastActivityLens();
                if (lastActivitiesLens != null && lastActivitiesLens.StartsWith(string.Format("/{0}/", styleDomain)))
                {
                    activitiesHref = lastActivitiesLens;
                }
            }
            <a href="@activitiesHref">Activities</a>
        </li>*@
    <li class="@(lastActivitiesLens == "snapshot" ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.TenantIndex(styleDomain) : MVC.Employees.Index())">Activities Snapshot</a>
    </li>
    <li class="@(lastActivitiesLens == "table" ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.TenantIndex(styleDomain) : MVC.Employees.Index())table">Activities Table</a>
    </li>
    <li class="@(lastActivitiesLens == "map" ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.TenantIndex(styleDomain) : MVC.Employees.Index())map">Activities Map</a>
    </li>

    <li class="@(Model.FindAnExpert ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.Experts(styleDomain) : MVC.Employees.Index())">Find an Expert</a>
    </li>
    <li class="@(Model.Degrees ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.DegreesTable(styleDomain, null) : MVC.Employees.Index())">Formal Education</a>
    </li>
    <li class="@(Model.Languages ? "current" : null)">
        <a href="@Url.Action(hasStyleDomain ? MVC.Employees.LanguagesTable(styleDomain, null) : MVC.Employees.Index())">Languages</a>
    </li>
    @if (Model.GeographicExpertise)
    {
        <li class="current">
            <a>Global Expertise</a>
        </li>
    }
    @if (Model.LanguageExpertise)
    {
        <li class="current">
            <a>Language Expertise</a>
        </li>
    }
    @if (Model.Other.Key != null && Model.Other.Value != null)
    {
        <li>
            <a href="@Model.Other.Value">@Html.Raw(Model.Other.Key)</a>
        </li>
    }
    @if (!string.IsNullOrWhiteSpace(Model.Custom))
    {
        <li class="current">
            <a>@Model.Custom</a>
        </li>
    }
</ul>